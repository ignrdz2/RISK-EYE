from pymongo import MongoClient
from datetime import datetime, timedelta
import random
import os

ZONAS = ["zona_A", "zona_B", "zona_C"]
ETIQUETAS = ["inflamable", "corrosivo", "t√≥xico", "explosivo", "gas a presi√≥n"]
OBSERVACIONES = [
    "Oxidaci√≥n leve detectada en la base de la v√°lvula secundaria.",
    "Se encontraron restos de sustancia corrosiva en el piso.",
    "Etiqueta de advertencia parcialmente desprendida.",
    "Fuga m√≠nima detectada en acople izquierdo, sin riesgo inmediato.",
    "Todo el sistema se encuentra en condiciones √≥ptimas.",
    "Se recomienda limpieza preventiva del conducto principal.",
    "Registro de olor fuerte, posiblemente relacionado a solventes.",
    "Sistema de ventilaci√≥n funcionando a capacidad reducida.",
    "Trazas de l√≠quido inflamable cerca de la bomba secundaria.",
    "Panel de advertencia visual obstruido por objetos.",
    "Historial de intervenci√≥n reciente, sin anomal√≠as visibles.",
    "Se observ√≥ formaci√≥n de condensaci√≥n inusual en la tuber√≠a.",
    "Mantenimiento realizado correctamente, sin hallazgos negativos.",
    "Registro de temperatura m√°s alta de lo habitual en la zona.",
    "Zona con acceso restringido por reparaci√≥n previa a√∫n en curso.",
    "Se detect√≥ un pitido constante en sensor de presi√≥n.",
    "Falta de se√±alizaci√≥n en una de las v√°lvulas cr√≠ticas.",
    "Se requiere verificar presi√≥n del sistema antes de la pr√≥xima tarea.",
    "Observaci√≥n rutinaria sin novedades relevantes.",
    "Historial indica dos incidentes menores en los √∫ltimos seis meses."
]
TIPOS_PIEZA = ["VALV", "BOMB", "DUCT", "SENS", "MOTR"]


def generar_mock():
    tipo = random.choice(TIPOS_PIEZA)
    numero = f"{random.randint(1, 9999):04}"
    return {
        "sector": random.choice(ZONAS),
        "id_pieza": f"{tipo}-{numero}",
        "fecha": datetime.now() - timedelta(days=random.randint(1, 365)),
        "etiquetas_detectadas": random.sample(ETIQUETAS, k=random.randint(1, 3)),
        "tipo_tarea": random.choice(
            ["inspecci√≥n general", "revisi√≥n de v√°lvulas", "limpieza", "reemplazo de componentes"]),
        "resultado": random.choice(["sin incidentes", "riesgo leve", "riesgo alto"]),
        "observaciones": random.choice(OBSERVACIONES)
    }


def seed():
    print("üîÑ Iniciando migraci√≥n/Seeder de historial de mantenimientos...")
    client = MongoClient(os.getenv("MONGO_URL"))
    db = client["riskeye"]
    collection = db["historial_mantenimientos"]

    collection.delete_many({})

    registros = [generar_mock() for _ in range(100)]
    collection.insert_many(registros)
    print("‚úÖ Migraci√≥n/Seeder completado.")

    if __name__ == "__main__":
        seed()
